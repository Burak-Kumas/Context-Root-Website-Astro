---
interface Props {
  title?: string;
  scrollText?: string;
  description?: string;
  image?: string;
}

const { title = "Default Title", scrollText = "", description = "", image = "" } = Astro.props;
---

<div class="pt-40 w-95 m-auto">
  <h2 class="text-20">{title}</h2>
  <div class="relative overflow-hidden whitespace-nowrap">
    <div class="flex scroll-content">
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
      <p class="text-8xl leading-[1.6] mr-8">{scrollText}</p>
    </div>
  </div>

  <div>
    <h3>
      {description}
    </h3>
  </div>
</div>
<div class="w-95 m-auto mt-6">
  <img src={image} alt="Image" class="h-[650px] w-full object-cover rounded-lg" />
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const scrollContent = document.querySelector(".scroll-content") as HTMLElement;
    const contentWidth = scrollContent?.scrollWidth;
    let scrollPosition = 0;

    function scrollText() {
      scrollPosition -= 2;

      if (contentWidth && scrollPosition <= -contentWidth / 2) {
        scrollPosition = 0;
      }

      scrollContent.style.transform = `translateX(${scrollPosition}px)`;
      requestAnimationFrame(scrollText);
    }

    scrollText();
  });
</script>
